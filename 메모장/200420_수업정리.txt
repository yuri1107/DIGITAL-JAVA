3. 연산자 (책 86p부터)

1. 단항연산자
-항이 1개만 필요한 연산자.
	-증감연산자 : 최종적으로 1 이 증가,감소 하는 연산자.
		-전위형 : (연산자)A; 증가 후 동작
		-후위형 : A(연산자); 동작 후 증가
	-부호연산자 : - : 부호를 반대로 
	-산술연산자 : + - * / %
		-정수 연산자 정수 = 정수
		-정수 연산자 실수 = 실수
		-실수 연산자 정수 = 실수
		-실수 연산자 실수 = 실수
		-정수 / 정수는 결과가 정수이어서 소수점이 사라져 원하는 결과가 나오지 않을 수 있다.
		*나머지 없이 딱 떨어지는 경우 원하는 결과가 나올 수 있음.
	-모드연산자 : % (나머지 연산자), A%B=>A를 B로 나눴을 때 나머지.
	ex: 5%3 = 2 , %의 결과는 0~B-1 (피연산자-1) 사이의 값이다.
		- %는 주로 배수(홀짝), 약수를 구할 때 사용.
		- 정수 연산자 정수 를 할때는 int로 변환하여 계산한다.
2.이항연산자
	-대입연산자 : =
		-오른쪽에 있는 값을 왼쪽에 저장.
		-왼쪽에는 상수가 없다.
		ex: 2=x; //에러
		-왼쪽에는 연산자가 올 수 없다.(분배에 대한 구분이 명확하지 않음)
		ex: x + y = 2; //에러
		-비교 연산자 (==)와 많이 혼동(조건문).
	-비교연산자 : < , > , <= , >= , == , !=
		-비교연산자는 결과가 참 또는 거짓 으로 나온다.
		-결과가 참 또는 거짓만 나오는 식을 '조건식' 이라고 한다.
		-비교연산자는 일반 자료형에서만 정상 작동을 한다. (문자열에서는 equals()라는 메서드 사용)
	-논리연산자 : && , || , !
		-&& : ~하고, 둘 다 참인 경우만 참, 나머진 다 거짓
		ex: 성적이 90점 이상'이고', 100점 이하일때 A학점이다. 성적이 89점이고 100점이하인 학생은 거짓.
		-|| : ~ 하거나, 둘 다 거짓인 경우만 거짓, 나머진 다 참
		ex: 신분증 제시할때 : 여권 참, 주민등록증 참, 면허증 참, 멤버십카드 거짓
		-! : 반대
		-논리 연산자는 조건식 중 하나이다.
	-효율적인 연산 (short circuit evaluation)
		-A && B 일때 A가 거짓이거나(언제나 거짓이기 때문) A || B 일때 A가 참이면(언제나 참이기 때문)
		 우측 피연산자의 값은 평가하지 않는다. 따라서 피연산자의 위치에 따라 연산 속도가 달라질 수 있다.
	-비트연산자 : 
		-비트논리연산자 : & , | , ~ , ^
		ex: int num1 = 12 , num2 = 10;
		    int num3 = num1 & num2;
		    int num4 = num1 | num2;
		    int num5 = num1 ^ num2;
		    int num6 = ~num1;
		12 : 00000000 00000000 00000000 00001100
		10 : 00000000 00000000 00000000 00001010
		03 : 00000000 00000000 00000000 00001000 (num1 & num2)
		14 : 00000000 00000000 00000000 00001110 (num1 | num2)
		06 : 00000000 00000000 00000000 00000110 (num1 ^ num2)
		      11111111 11111111 11111111 11110011 (~num1)
		      00000000 00000000 00000000 00001101 (음수)
		-비트쉬프트연산자 : << , >>
			- << : 비트를 왼쪽으로 이동
			- >> : 비트를 오른쪽으로 이동
			- 비트쉬프트 연산자는 비트를 이동시킨 후에 남은 자리는 부호비트로 채운다.
			10     :    00001010
			10 >> 1 : 00000101 : 5
			10 >> 2 : 00000010 : 2
			10 >> 3 : 00000001 : 1
		-복합대입연산자 : 연산자를 줄여쓰는것.
		ex: A = A 연산자 B; 일때 A 연산자 = B; 라고 표기.
3.삼항연산자
		-조건연산자 : 유일한 삼항 연산자
			-(조건식)?참:거짓;
			-보통은   변수 = (조건식)?참:거짓;   으로 표기
			int num = 4;
			boolean isEven = (num % 2 == 0) ? true : false;
			boolean isOdd = (num % 2 == 0) ? false : true;
2. 조건문 : ~하면/라면/이면 ... 한다
ex: 사이다를 선택'하면' 사이다가 나온다.
	-if문 : 모든 조건문은 if문으로 표현 가능하다.
	기본문법 : ~하면 ...한다 에서 ~ 는 조건식, ...은 실행문 에 해당된다.
		조건식1이 참이면 실행문1을 실행해라.
		else는 조건식이 없다.

	if (조건식1) { 실행문1; }
	else if (조건식2) { //조건식1이 거짓이고 조건식2가 참이면 실행문2를 실행.
		실행문2; 
	}
	else { // 현재 위치를 기준으로 위에 있는 모든 조건식이 거짓이면 실행문 3; }
		
	if (조건식1) { 실행문1; 
		else if(조건식2) { 실행문2;
		}
		else { 실행문3;}
	}
ex: num가 짝수이면 짝수 라고 출력한다.
if (num가 짝수이다) { (num는 짝수라고 출력); }

if (num % 2 == 0) {
	System.out.println(num + "는 짝수");
}
	-중첩if문 : if문 안에 실행문으로 if문이 오는 경우.
if (조건식1) {
	if (조건식2) {
		실행문1;
	}
}

	-switch문 : 상황에 따라 switch문으로 표현하면 if문보다 간결하게 표현 가능.
		1. 사용되는 변수의 값이 제한적인 경우.
		2. 사용되는 식의 결과가 제한적인 경우.
switch (변수나 식) {
	case 값1 :
		실행문1;
		break;
	case 값2 :
		실행문2;
		break;
	default : 
		실행문3;
}

3. 반복문
- 규칙성을 가진 작업을 반복적으로 할 때 사용
1. 규칙성 찾기
2. 반복 횟수
-for, while / do while
for문 문법
for(1.초기화;2.5.8.조건식;4.7.증감연산식) { 3.6 실행문; }

1. 초기화 : 조건식이나 실행문에서 사용하는 변수의 값을 초기화하는 곳으로 
	생략할 수 있고, 여러변수를 통해 초기화 할 수 있다.
2. 조건식 : 반복문이 실행되기 위한 조건으로 참이면 반복문을 계속 실행, 거짓이면 반복문을 종료.
3. 실행문 : 
4. 증감연산식 : 조건식에서 사용하는 변수를 증가 또는 감소 시켜서 반복횟수를 조절.
	반복문에서 반복횟수는 초기화 + 조건식 + 증감연산식 이 함께 관여한다.








