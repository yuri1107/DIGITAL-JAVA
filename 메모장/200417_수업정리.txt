1. 변수
- 하나의 값을 저장하는 메모리 공간
- 변하는 수

*무엇이든 넣을 수 있기때문에 박스같은 개념이지만 이것저것 넣으면 헷갈리니까 한가지만 넣도록 한다.
이것을 변수타입(자료형) 이라고 함. 기본형-논리형,문자형,정수형,실수형. 종류가 많은 이유는 byte로 구분하기때문에.

- 변수 타입(자료형) : 변수를 크게 분류
- 논리형 : boolean
- 문자형 : char *선언시 ''안에 있는것이 문자,""안에 있는것이 문자열
- 정수형 : int, byte, short, long
- 실수형 : double, float

- 변수 선언
변수타입 변수명;
ex: 정수형 변수 number를 선언하세요 = int number;
ex: 정수형 변수 number에 초기값 10을 저장하여 선언하세요. = int number = 10;
ex: 실수형 변수 score에 초기값 90.5를 저장하여 선언하세요. = double score = 90.5; or float score = 90.5f;
ex: 문자형 변수 ch에 초기값 A를 저장하여 선언하세요. = char ch = 'A';
ex: 논리형 변수 isEven의 초기값을 참으로 저장하여 선언하세요. = boolean isEven = true;
ex: 정수형 x와 y를 선언하세요. = 
int x; 
int y; 이렇게 엔터쳐서 따로 선언할수도 있지만
int x=1,y=2; 이렇게 콤마를 구분자로 여러 변수를 한줄에 선언 가능. 

'1' : 문자 1
'12' : 잘못된 코드
"1" : 문자열 1
"12" : 문자열 12

- 변수 명명 규칙
1. 대소문자 구분, 길이제한 없음
ex: int A,a;
2. 예약어를 사용할 수 없다. 
- 예약어 : 미리 역할이 지정되어 있는 단어, 일반적으로 폰트 색상이 다르다.
ex: int int; = 에러 , int Int; = 가능
3. 숫자로 시작할 수 없다.
ex: int num1; = 가능 , int 1num; = 에러
4. 특수문자는 _와$만 가능하다.
ex: int $num; = 가능 , int _num; = 가능 , int #num; = 에러
5. 변수명은 중복선언 할 수 없다.
ex: int num; char num; = 에러

- 변수명 작성 관례 (지키지 않아도 에러는 없으나 일반적으로 대부분 개발자들이 이렇게 작성한다.)
1. 클래스는 대문자로 시작하고, 변수명은 소문자로 시작.
2. 여러 단어로 이루어진 경우 두번째 단어부터 첫글자를 대문자로 한다. (카멜표기법)
3. 상수의 이름은 모두 대문자로 하고, 여러 단어로 이루어진 경우 _로 구분한다.
4. 변수의 이름은 의미있게 작성해라.
ex: int appleCount; (사과의 갯수를 세어야하는경우 int a; 라고 선언하는것보다 의미있고 직관적임)

- 상수 : 바꿀 수 없는 수 (1을 놓고 2라고 할 수 없듯이) ex: 'a'
- 리터럴 : 의미가 있는 상수
ex: int MAX = 10; (이 경우에는 MAX라는 변수의 값이 10인 것.) 이 선언 후 MAX = 11; 이라고 추가 선언 가능. 
	(이경우 MAX 를 상수, 10을 리터럴 이라고 함.)
	하지만 final int MAX = 10; 이라고 선언 한 후에는 MAX = 11; 이라고 선언이 불가능함.
long num = 21474836470; 이라고 선언할때 int 로 선언하면 숫자가 잘려 나오기때문에 세미콜른 전에 L을 붙여야함.
float num2 = 1.23; 이라고 선언할때 실상은 1.23(d) 라는 의미이다. 실수는 모두 더블형이기 때문. 하지만 float로 자료형을 지정한 경우 세미콜른 전에 f를 붙여야함.

10진수가 아닌 정수의 값을 저장하는 방법 (p.33)
int num1 = 10; //10진수 10
int num2 = 010;//8진수 10, 10진수 8
int num3 = 0x10;//16진수 10, 10진수 16
int num4 = 0b10;//2진수 10, 10진수 2

print() : 원하는 문자열을 출력하는 메소드로 문자열이 꼭 필요.
println() : 원하는 문자열을 출력 후 엔터를 치는 메소드로 문자열이 없어도 가능.
printf() : 정형화된 문자열을 출력하는 메소드로 문자열이 꼭 필요.
	=> 문자열의 형태를 지정할 수 있다.(ex: 소수점 n째자리까지 출력)

printf("%d,%d\n",10,20);

cmd
java -version

진법

1 : 00000000 00000000 00000000 00000001
    11111111 11111111 11111111 11111110 (1의 1의보수)
-1: 11111111 11111111 11111111 11111111 (1의 2의보수)

맨앞에는 부호비트로 숫자가 양수인지 음수인지 구분한다. 

자료형변환
- 자료형을 일시적으로 변환시키는 것
ex: int형 변수 num의 자료형을 일시적으로 double로 변환시키거나 double형 변수 dnum의 자료형을 int로 변환 시키는것.
- 명시적 자료형 변환 : 자료형변환을 생략할 수 없는 경우(에러 발생), 
	의도적으로 해당 자료형이 필요한 경우 (나누기에 다시설명)
- 자동 자료형 변환 : 에러가 발생하지 않는 경우
- 자료형을 바꾸고 싶은 상수나 변수 앞에 (바꾸려는 자료형) 을 써준다.

정리-------------------------------

1. 변수 : 하나의 값을 저장하는 메모리 공간
2. 변수타입(자료형) : 변수의 값을 분류
	-논리형 : boolean(1byte)
	-문자형 : char(2byte)
	-정수형 : byte(1byte),short(2byte),int(4byte),long(8byte)
	-실수형 : float(4byte),double(8byte)
3. 변수 선언
	-변수타입 변수명;
	-변수타입 변수명 = 초기값;
		-문자 : ''
		-문자열 : ""
4. 변수명 작성 규칙
5. 변수명 작성 관례
	-클래스명은 대문자로 시작, 변수명은 소문자로 시작
	-두단어 이상인 경우 두번째 단어부터 첫글자를 대문자로
	-상수는 모두 대문자로, 여러단어일 경우 _로 구분
	-변수, 클래스명은 의미있는 단어로 작성.
6. 표준 입출력
	-표준입력 : Scanner
	-표준출력 : System.out.println(),print(),printf()
7. 진법
	-2의 보수 : 음수
	-정수 표현범위
	-오버플로우, 언더플로우 (최대 양수보다 큰 값이면 음수로 출력, 최소양수보다 작은값으면 양수로 출력)
8.자료형 변환
	-자동 (정수->실수,작은바이트->큰바이트)
	-명시적 (자동 자료형변환이 안되는경우, 의도적으로 자료형변환이 필요한경우)












