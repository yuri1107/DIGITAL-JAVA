1.객체지향프로그래밍
 ex: 사진을찍으려면 카메라가 필요하고 카메라를 만드려면 카메라설계도가 필요하다.
     기능(메소드)를 하려면 인스턴스(객체)가 필요하고 인스턴스(객체)를 만드려면 클래스가 필요하다.

*클래스명을 지을때는 첫글자를 대문자로.

접근제한자
- public : 누구나 사용 가능
- private : 나만 사용 가능 (해당 클래스 내에서만 사용) 일반적으로 클래스에 붙이지는 않음.
- protected : 나+패키지+자식클래스
- default : 나+패키지 (접근제한자를 사용하지 않으면 기본으로 적용되는 접근제한자.)

메서드 - 기능, 변수명과 같이 메서드명을 정할때는 숫자로 시작하면 안됨
접근제한자 (static) 리턴타입 메서드명(매개변수들) { //(static)은 생략 가능
	구현;
	return 값;
}

매개변수 : 메서드를 실행하기 위해 필요한 최소한의 정보
리턴타입 : 메서드 종료 후 알려주는 정보의 자료형

생성자 - 멤버변수 초기화,클래스명과 똑같다.
생성자는 보통 클래스 밖에서 만들어오기때문에 접근제한자를 public로 한다.
//기본생성자
public 클래스명() {

}

//생성자 오버로딩 (이름은 같은경우를 오버로딩이라고 함)
public 클래스명 (매개변수) {
}

멤버변수는 기본 0으로 자동 초기화가 됨.
이름이 같은 메서드나 생성자가 존재할 수 있다. 아래의 조건을 만족하면
- 매개변수가 달라지는 경우
1. 매개변수의 갯수가 달라지는 경우
2. 매개변수의 자료형이 달라지는 경우


변수  : 모든 변수는 일반변수이거나 참조변수 둘중 하나임. 
매개변수는 아예 종류가 다르다.(일반변수이면서 매개변수 가능, 참조변수이면서 매개변수 가능)
-일반변수 : 실제 사용하는 값을 저장하는 변수
-참조변수 : 주소를 저장하는 변수 => 누군가와 연결 

-객체변수 (멤버변수라고도 하고 인스턴스변수 라고도함) :  
-클래스 변수(static) : 객체 생성 없이 사용
*클래스 메소드 : 
-객체 생성 없이 사용 => 클래스명.메소드명()으로 사용
-클래스 메소드에는 객체 변수를 사용할 수 없음
-클래스 메소드에는 객체메서드를 사용할 수 없음

*객체변수 : 객체를 생성해야 사용 가능
객체메서드 
-클래스변수를 사용할 수 있다.


클래스의 구성 요소
1.멤버변수
-객체변수와 클래스변수
2.메서드
-객체메서드와 클래스메서드
3.생성자
-기본생성자와 오버로딩

클래스 : 아이폰
-클래스 변수 : 제조사
-객체 변수 : 기기번호, 볼륨, 밝기, 배터리 잔량

-클래스 메소드 : 부팅 화면,
-객체 메소드 : 배경화면 설정, 

-생성자 : 공장초기화, 아이폰을 만들 때 색상을 정해서 만듦.


----------------------------------------------------------

정리

접근제한자 : 접근할 수 있는 여부를 결정하는 키워드

public : 모두 사용 가능
-클래스 : 무조건 파일명과 클래스명이 같을때
-멤버변수 : 주로 상수일 때
-메서드 : 대부분의 메서드가 public
private : 해당 클래스만 사용가능
-멤버변수 : 대부분의 멤버변수는 private 으로 사용
-메서드 : 다른 클래스에서 사용하는 메서드가 아니라 내부에서 사용하는 메서드인 경우.
	같은 코드를 여러 클래스에서 사용할 경우 코드의 길이를 줄이기 위해 private 메서드로 만들어놓는다.
protected : 상속받은 클래스 + 나 + 같은 패키지의 클래스

() : default : 나 + 같은 패키지의 다른 클래스

-클래스 생성방법
접근제한자 class 클래스명 {
	접근제한자 자료형 변수명;//객체 변수
	접근제한자 static 자료형 변수명; //클래스변수

	접근제한자 리턴타입 메서드명(매개변수){} //객체메서드
	접근제한자 static 리턴타입 메서드명(매개변수){} //클래스메서드
	**** {실행문} 안에서 return 하고 리턴타입을 기재하지 않는 이유는 
	기재하게 되면 그때 변수를 선언하는것과 다름이 없기 때문에.
	그리고 매개변수를 실행문 전에 선언하면서 생성하는건 값을 가져올때만 필요하기 때문에.

	public 클래스명() {}
	public 클래스명(매개변수) {}
}

-메서드 선언방법
접근제한자 static 리턴타입 메서드명(매개변수) {}












 